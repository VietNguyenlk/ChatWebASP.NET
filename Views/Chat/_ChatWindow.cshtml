@model List<ChatWeb.Models.ChatMessage>

@{
    var currentUserId = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
    var senderUserName = User.Identity?.Name;
}

<div class="chat-container">
    <div class="chat-inner">
        <div class="chat-header">
            💬 Chat Room
            <h4>📞 Cuộc gọi thoại</h4>
            <div class="voice-controls">
                <button id="voiceCallButton">🔊 Gọi thoại</button>
                <button id="endVoiceCallButton">❌ Kết thúc thoại</button>
            </div>

            <button class="video-call-button" id="openVideoCallModal">
                <svg class="video-call-icon" viewBox="0 0 24 24">
                    <path d="M17 10.5V7c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1v10c0 .55.45 1 1 1h12c.55 0 1-.45 1-1v-3.5l4 4v-11l-4 4z" />
                </svg>
            </button>
        </div>


        <div id="chatBox" class="chat-box">
            @if (Model != null && Model.Any())
            {
                foreach (var msg in Model)
                {
                    var isSentByCurrentUser = msg.SenderUserName == ViewBag.SelectedUser?.UserName;
                    var messageClass = isSentByCurrentUser ? "received" : "sent";
                    <div class="message @messageClass">
                        <div class="message-bubble">
                            @msg.Content
                            <div class="message-time">@msg.Timestamp</div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="empty-state">
                    <svg class="empty-state-icon" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z" clip-rule="evenodd"></path>
                    </svg>
                    <p>Start a conversation!</p>
                </div>
            }
        </div>

        <div class="typing-indicator" id="typingIndicator">
            Someone is typing<span class="typing-dots"><span></span><span></span><span></span></span>
        </div>

        <div class="chat-input-container">
            <div class="chat-input-wrapper">
                <input type="text" id="messageInput" class="message-input" placeholder="Type your message..." />
                <button class="send-button" onclick="sendMessage()">
                    <svg class="send-icon" viewBox="0 0 24 24">
                        <path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z" />
                    </svg>
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Video Call Modal -->
<div class="modal" id="videoCallModal">
    <div class="modal-content">
        <div class="modal-header">
            <div class="modal-title">📹 Video Call</div>
            <button class="modal-close" id="closeVideoCallModal">&times;</button>
        </div>
        <div class="modal-body">
            <div class="call-status" id="callStatus">Ready to call</div>
            <div class="video-container">
                <div class="video-box">
                    <video id="localVideo" autoplay playsinline muted></video>
                </div>
                <div class="video-box">
                    <video id="remoteVideo" autoplay playsinline></video>
                </div>
            </div>
            <div class="video-controls">
                <button id="callButton" class="call-button">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M22 16.92v3a2 2 0 01-2.18 2 19.79 19.79 0 01-8.63-3.07 19.5 19.5 0 01-6-6 19.79 19.79 0 01-3.07-8.67A2 2 0 014.11 2h3a2 2 0 012 1.72 12.84 12.84 0 00.7 2.81 2 2 0 01-.45 2.11L8.09 9.91a16 16 0 006 6l1.27-1.27a2 2 0 012.11-.45 12.84 12.84 0 002.81.7A2 2 0 0122 16.92z"></path>
                    </svg>
                    Call
                </button>
                <button id="endCallButton" class="call-button">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M10.68 13.31a16 16 0 003.41 2.6l1.27-1.27a2 2 0 012.11-.45 12.84 12.84 0 002.81.7 2 2 0 011.72 2v3a2 2 0 01-2.18 2 19.79 19.79 0 01-8.63-3.07 19.42 19.42 0 01-3.33-2.67m-2.67-3.34a19.79 19.79 0 01-3.07-8.63A2 2 0 014.11 2h3a2 2 0 012 1.72 12.84 12.84 0 00.7 2.81 2 2 0 01-.45 2.11L8.09 9.91"></path>
                        <line x1="23" y1="1" x2="1" y2="23"></line>
                    </svg>
                    End Call
                </button>
            </div>
        </div>
    </div>
</div>

<input type="hidden" id="receiverId" value="@ViewBag.ReceiverId" />
<input type="hidden" id="senderId" value="@currentUserId" />
<input type="hidden" id="senderUserName" value="@senderUserName" />

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script>
    let iceCandidateBuffer = [];
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chathub")
        .configureLogging(signalR.LogLevel.Information)
        .build();

    const senderId = document.getElementById("senderId").value;
    const receiverId = document.getElementById("receiverId").value;
    const senderUserName = document.getElementById("senderUserName").value;

    // Modal elements
    const videoCallModal = document.getElementById("videoCallModal");
    const openVideoCallModalBtn = document.getElementById("openVideoCallModal");
    const closeVideoCallModalBtn = document.getElementById("closeVideoCallModal");
    const callStatus = document.getElementById("callStatus");

    // Video elements
    const localVideo = document.getElementById("localVideo");
    const remoteVideo = document.getElementById("remoteVideo");
    const callButton = document.getElementById("callButton");
    const endCallButton = document.getElementById("endCallButton");

    let localStream;
    let peerConnection;
    const config = {
        iceServers: [{ urls: "stun:stun.l.google.com:19302" }]
    };

    // Modal control
    openVideoCallModalBtn.addEventListener("click", () => {
        videoCallModal.style.display = "flex";
    });

    closeVideoCallModalBtn.addEventListener("click", () => {
        videoCallModal.style.display = "none";
        endCall();
    });

    window.addEventListener("click", (event) => {
        if (event.target === videoCallModal) {
            videoCallModal.style.display = "none";
            endCall();
        }
    });
        // Cleanup khi đóng trang
    window.addEventListener('beforeunload', () => {
        if (isVoiceCallActive) {
            endVoiceCall();
        }
    });

    // ========= Chat =========
    connection.on("ReceiveMessage", function (senderId, message, senderUserName) {
        addMessage(senderUserName, message, 'received');
    });

    function addMessage(senderUserName, message, type) {
        const msgBox = document.getElementById("chatBox");
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${type}`;

        const currentTime = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

        messageDiv.innerHTML = `
            <div class="message-bubble">
                ${message}
                <div class="message-time">${currentTime}</div>
            </div>
        `;

        const emptyState = msgBox.querySelector('.empty-state');
        if (emptyState) emptyState.remove();

        msgBox.appendChild(messageDiv);
        msgBox.scrollTop = msgBox.scrollHeight;
    }

    async function sendMessage() {
        const message = document.getElementById("messageInput").value;
        if (!message.trim()) return;

        try {
            await connection.invoke("SendMessage", senderId, receiverId, message, senderUserName);
            addMessage("You", message, 'sent');
            document.getElementById("messageInput").value = "";
        } catch (err) {
            console.error("Send error:", err);
        }
    }

    document.getElementById("messageInput").addEventListener("keypress", function (event) {
        if (event.key === "Enter") {
            event.preventDefault();
            sendMessage();
        }
    });

    // ========= Video Call =========
        connection.on("ReceiveSignal", async (senderId, signal) => {
        const data = JSON.parse(signal);

        // Xác định connection nào đang được sử dụng
        const activeConnection = voiceConnection || peerConnection;

        if (!activeConnection) {
            // Tạo connection tùy theo loại cuộc gọi
            if (isVoiceCallActive || (!peerConnection && !videoCallModal.style.display)) {
                await createVoiceConnection(senderId);
            } else {
                await createPeerConnection(senderId);
            }
        }

        try {
            const currentConnection = voiceConnection || peerConnection;

            if (data.type === "offer") {
                await currentConnection.setRemoteDescription(new RTCSessionDescription(data));
                const answer = await currentConnection.createAnswer();
                await currentConnection.setLocalDescription(answer);
                await connection.invoke("SendSignal", senderId, JSON.stringify(answer));

                if (voiceConnection) {
                    updateVoiceCallUI(true);
                } else {
                    callStatus.textContent = "Call connected";
                }
            } else if (data.type === "answer") {
                await currentConnection.setRemoteDescription(new RTCSessionDescription(data));

                if (voiceConnection) {
                    updateVoiceCallUI(true);
                } else {
                    callStatus.textContent = "Call connected";
                }
            } else if (data.candidate) {
                if (currentConnection.remoteDescription) {
                    await currentConnection.addIceCandidate(new RTCIceCandidate(data));
                } else {
                    console.log("Buffering ICE candidate until remote description is set");
                }
            }
        } catch (error) {
            console.error("Error processing signal:", error);
            if (voiceConnection) {
                endVoiceCall();
            } else {
                endCall();
            }
        }
    });

    connection.on("CallAccepted", async (accepterId) => {
        console.log("Call accepted by:", accepterId);
        if (voiceConnection) {
            updateVoiceCallUI(true);
        } else {
            callStatus.textContent = "Call connected";
        }
    });


    connection.on("CallDeclined", (declinerId) => {
        if (voiceConnection) {
            voiceCallButton.textContent = "❌ Cuộc gọi bị từ chối";
            setTimeout(() => {
                voiceCallButton.textContent = "🔊 Gọi thoại";
                voiceCallButton.disabled = false;
            }, 2000);
            endVoiceCall();
        } else {
            callStatus.textContent = "Call declined";
            setTimeout(() => {
                callStatus.textContent = "Ready to call";
            }, 2000);
            endCall();
        }
    });


    connection.on("CallEnded", () => {
        if (voiceConnection) {
            endVoiceCall();
        } else {
            callStatus.textContent = "Call ended";
            setTimeout(() => {
                callStatus.textContent = "Ready to call";
            }, 2000);
            endCall();
        }
    });

       connection.on("IncomingCall", async (callerId, callerName, callType) => {
        if (callType === "voice") {
            const accepted = confirm(`📞 ${callerName} đang gọi thoại cho bạn. Nhận cuộc gọi?`);

            if (accepted) {
                try {
                    await createVoiceConnection(callerId);
                    await connection.invoke("AcceptCall", callerId);
                    updateVoiceCallUI(true);
                } catch (error) {
                    console.error("Error accepting voice call:", error);
                    alert("Không thể nhận cuộc gọi");
                    endVoiceCall();
                }
            } else {
                await connection.invoke("DeclineCall", callerId);
            }
        } else {
            // Video call logic (giữ nguyên code cũ)
            videoCallModal.style.display = "flex";
            callStatus.textContent = `Incoming call from ${callerName}...`;

            if (confirm(`📞 ${callerName} đang gọi bạn (${callType}) — Nhận cuộc gọi?`)) {
                try {
                    await createPeerConnection(callerId);
                    await connection.invoke("AcceptCall", callerId);
                    callStatus.textContent = "Call connected";
                } catch (error) {
                    console.error("Error accepting call:", error);
                    callStatus.textContent = "Failed to connect";
                    endCall();
                }
            } else {
                await connection.invoke("DeclineCall", callerId);
                callStatus.textContent = "Call declined";
                videoCallModal.style.display = "none";
            }
        }
    });


    callButton.onclick = async () => {
        try {
            callStatus.textContent = "Calling...";
            await createPeerConnection(receiverId);
            const offer = await peerConnection.createOffer();
            await peerConnection.setLocalDescription(offer);
            await connection.invoke("SendSignal", receiverId, JSON.stringify(offer));
            await connection.invoke("InitiateCall", receiverId, senderUserName, "video");
            callStatus.textContent = "Waiting for answer...";
        } catch (error) {
            console.error("Error initiating call:", error);
            callStatus.textContent = "Failed to call";
            endCall();
        }
    };

    endCallButton.onclick = async () => {
        callStatus.textContent = "Ending call...";
        endCall();
        await connection.invoke("EndCall", receiverId);
        callStatus.textContent = "Ready to call";
    };

    async function createPeerConnection(otherUserId) {
        try {
            peerConnection = new RTCPeerConnection(config);

               peerConnection.onicecandidate = (event) => {
        if (event.candidate) {
            connection.invoke("SendSignal", otherUserId, JSON.stringify({
                candidate: event.candidate.candidate,
                sdpMid: event.candidate.sdpMid,
                sdpMLineIndex: event.candidate.sdpMLineIndex
            }));
        }
    };

            peerConnection.ontrack = (event) => {
                console.log("Received remote stream");
                remoteVideo.srcObject = event.streams[0];
            };

            peerConnection.onconnectionstatechange = () => {
                console.log("Connection state:", peerConnection.connectionState);
                if (peerConnection.connectionState === 'failed') {
                    console.error("Connection failed");
                    callStatus.textContent = "Connection failed";
                    endCall();
                }
            };

            localStream = await navigator.mediaDevices.getUserMedia({
                video: true,
                audio: true
            });

            localVideo.srcObject = localStream;

            localStream.getTracks().forEach(track => {
                peerConnection.addTrack(track, localStream);
            });

            console.log("PeerConnection created successfully");

        } catch (error) {
            console.error("Error creating peer connection:", error);
            callStatus.textContent = "Failed to access camera/microphone";
            throw error;
        }
    }

    function endCall() {
        if (peerConnection) {
            peerConnection.close();
            peerConnection = null;
        }
        if (localStream) {
            localStream.getTracks().forEach(track => track.stop());
            localStream = null;
        }
        localVideo.srcObject = null;
        remoteVideo.srcObject = null;
        console.log("Call ended and resources cleaned up");
    }
    /// call voice
        // Voice call variables
    let voiceConnection;
    let localAudioStream;
    let isVoiceCallActive = false;

    // Voice call buttons
    const voiceCallButton = document.getElementById("voiceCallButton");
    const endVoiceCallButton = document.getElementById("endVoiceCallButton");

    // Voice call button events
    voiceCallButton.addEventListener("click", initiateVoiceCall);
    endVoiceCallButton.addEventListener("click", endVoiceCall);

    // Initially hide end call button
    endVoiceCallButton.style.display = "none";

    // ========= Voice Call Functions =========

    async function initiateVoiceCall() {
        try {
            voiceCallButton.textContent = "🔄 Đang gọi...";
            voiceCallButton.disabled = true;

            await createVoiceConnection(receiverId);
            const offer = await voiceConnection.createOffer();
            await voiceConnection.setLocalDescription(offer);

            await connection.invoke("SendSignal", receiverId, JSON.stringify(offer));
            await connection.invoke("InitiateCall", receiverId, senderUserName, "voice");

            voiceCallButton.textContent = "⏳ Chờ phản hồi...";

        } catch (error) {
            console.error("Error initiating voice call:", error);
            voiceCallButton.textContent = "🔊 Gọi thoại";
            voiceCallButton.disabled = false;
            alert("Không thể bắt đầu cuộc gọi. Vui lòng kiểm tra microphone.");
        }
    }

    async function createVoiceConnection(otherUserId) {
        try {
            voiceConnection = new RTCPeerConnection(config);

            voiceConnection.onicecandidate = (event) => {
                if (event.candidate) {
                    connection.invoke("SendSignal", otherUserId, JSON.stringify({
                        candidate: event.candidate.candidate,
                        sdpMid: event.candidate.sdpMid,
                        sdpMLineIndex: event.candidate.sdpMLineIndex
                    }));
                }
            };

            voiceConnection.ontrack = (event) => {
                console.log("Received remote audio stream");
                const remoteAudio = new Audio();
                remoteAudio.srcObject = event.streams[0];
                remoteAudio.play();
            };

            voiceConnection.onconnectionstatechange = () => {
                console.log("Voice connection state:", voiceConnection.connectionState);
                if (voiceConnection.connectionState === 'connected') {
                    isVoiceCallActive = true;
                    updateVoiceCallUI(true);
                } else if (voiceConnection.connectionState === 'failed') {
                    console.error("Voice connection failed");
                    endVoiceCall();
                }
            };

            // Chỉ lấy audio stream cho voice call
            localAudioStream = await navigator.mediaDevices.getUserMedia({
                audio: true,
                video: false
            });

            localAudioStream.getTracks().forEach(track => {
                voiceConnection.addTrack(track, localAudioStream);
            });

            console.log("Voice connection created successfully");

        } catch (error) {
            console.error("Error creating voice connection:", error);
            throw error;
        }
    }

    function endVoiceCall() {
        if (voiceConnection) {
            voiceConnection.close();
            voiceConnection = null;
        }

        if (localAudioStream) {
            localAudioStream.getTracks().forEach(track => track.stop());
            localAudioStream = null;
        }

        isVoiceCallActive = false;
        updateVoiceCallUI(false);

        // Thông báo cho người khác
        if (receiverId) {
            connection.invoke("EndCall", receiverId);
        }

        console.log("Voice call ended and resources cleaned up");
    }

    function updateVoiceCallUI(isActive) {
        if (isActive) {
            voiceCallButton.style.display = "none";
            endVoiceCallButton.style.display = "inline-block";
            endVoiceCallButton.textContent = "❌ Kết thúc thoại";

            // Thêm indicator cho cuộc gọi đang hoạt động
            const chatHeader = document.querySelector('.chat-header h4');
            chatHeader.style.color = "#00ff00";
            chatHeader.textContent = "📞 Đang trong cuộc gọi...";
        } else {
            voiceCallButton.style.display = "inline-block";
            voiceCallButton.textContent = "🔊 Gọi thoại";
            voiceCallButton.disabled = false;
            endVoiceCallButton.style.display = "none";

            // Reset header
            const chatHeader = document.querySelector('.chat-header h4');
            chatHeader.style.color = "";
            chatHeader.textContent = "📞 Cuộc gọi thoại";
        }
    }




    //////////////////////////////////////////////////////
    connection.start()
        .then(() => console.log("SignalR connected"))
        .catch(err => console.error("Connection error:", err));
</script>