@model List<ChatWeb.Models.ChatMessage>

<style>
    .chat-container {
    max-width: 800px;
    margin: 20px auto;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 20px;
    padding: 2px;
    box-shadow: 0 20px 40px rgba(0,0,0,0.1);
    }

    .chat-inner {
    background: white;
    border-radius: 18px;
    overflow: hidden;
    height: 600px;
    display: flex;
    flex-direction: column;
    }

    .chat-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 20px;
    text-align: center;
    font-weight: 600;
    font-size: 1.2em;
    position: relative;
    }

    .chat-header::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 20px;
    transform: translateY(-50%);
    width: 12px;
    height: 12px;
    background: #4ade80;
    border-radius: 50%;
    box-shadow: 0 0 0 3px rgba(74, 222, 128, 0.3);
    animation: pulse-animation 2s infinite;
    }

    .chat-box {
    flex: 1;
    overflow-y: auto;
    padding: 20px;
    background: linear-gradient(to bottom, #f8fafc, #f1f5f9);
    position: relative;
    }

    .chat-box::-webkit-scrollbar {
    width: 6px;
    }

    .chat-box::-webkit-scrollbar-track {
    background: transparent;
    }

    .chat-box::-webkit-scrollbar-thumb {
    background: linear-gradient(135deg, #667eea, #764ba2);
    border-radius: 10px;
    }

    .message {
    margin-bottom: 16px;
    animation: fade-in-up 0.4s ease-out;
    }

    .message.sent {
    text-align: right;
    }

    .message.received {
    text-align: left;
    }

    .message-bubble {
    display: inline-block;
    max-width: 70%;
    padding: 12px 18px;
    border-radius: 20px;
    font-size: 14px;
    line-height: 1.4;
    word-wrap: break-word;
    position: relative;
    }

    .message.sent .message-bubble {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border-bottom-right-radius: 6px;
    }

    .message.received .message-bubble {
    background: white;
    color: #374151;
    border: 1px solid #e5e7eb;
    border-bottom-left-radius: 6px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.06);
    }

    .message-sender {
    font-size: 11px;
    color: #6b7280;
    margin-bottom: 4px;
    font-weight: 500;
    }

    .message.sent .message-sender {
    text-align: right;
    }

    .message.received .message-sender {
    text-align: left;
    }

    .message-time {
    font-size: 10px;
    color: rgba(255,255,255,0.7);
    margin-top: 4px;
    }

    .message.received .message-time {
    color: #9ca3af;
    }

    .chat-input-container {
    padding: 20px;
    background: white;
    border-top: 1px solid #e5e7eb;
    }

    .chat-input-wrapper {
    display: flex;
    align-items: center;
    background: #f9fafb;
    border: 2px solid #e5e7eb;
    border-radius: 25px;
    padding: 8px;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
    }

    .chat-input-wrapper:focus-within {
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    background: white;
    }

    .message-input {
    flex: 1;
    border: none;
    outline: none;
    background: transparent;
    padding: 8px 15px;
    font-size: 14px;
    color: #374151;
    resize: none;
    }

    .message-input::placeholder {
    color: #9ca3af;
    }

    .send-button {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    border: none;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
    }

    .send-button:hover {
    transform: scale(1.05);
    box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
    }

    .send-button:active {
    transform: scale(0.95);
    }

    .send-icon {
    width: 18px;
    height: 18px;
    fill: currentColor;
    }

    .typing-indicator {
    display: none;
    padding: 10px 20px;
    color: #6b7280;
    font-style: italic;
    font-size: 13px;
    }

    .typing-dots {
    display: inline-block;
    }

    .typing-dots span {
    display: inline-block;
    width: 4px;
    height: 4px;
    border-radius: 50%;
    background: #6b7280;
    margin: 0 1px;
    animation: typing-animation 1.4s infinite ease-in-out;
    }

    .typing-dots span:nth-child(1) {
    animation-delay: -0.32s;
    }

    .typing-dots span:nth-child(2) {
    animation-delay: -0.16s;
    }

    .empty-state {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100%;
    color: #9ca3af;
    text-align: center;
    }

    .empty-state-icon {
    width: 64px;
    height: 64px;
    margin-bottom: 16px;
    opacity: 0.5;
    }

    /* Animations */
    /* @@keyframes pulse-animation { */
    /*     0% { */
    /*         box-shadow: 0 0 0 0 rgba(74, 222, 128, 0.7); */
    /*     } */

    /*     70% { */
    /*         box-shadow: 0 0 0 10px rgba(74, 222, 128, 0); */
    /*     } */

    /*     100% { */
    /*         box-shadow: 0 0 0 0 rgba(74, 222, 128, 0); */
    /*     } */
    /* } */

    /* @@keyframes fade-in-up { */
    /*     0% { */
    /*         opacity: 0; */
    /*         transform: translateY(20px); */
    /*     } */

    /*     100% { */
    /*         opacity: 1; */
    /*         transform: translateY(0); */
    /*     } */
    /* } */

    /* @@keyframes typing-animation { */
    /*     0% { */
    /*         transform: scale(0.8); */
    /*         opacity: 0.5; */
    /*     } */

    /*     40% { */
    /*         transform: scale(1); */
    /*         opacity: 1; */
    /*     } */

    /*     80% { */
    /*         transform: scale(0.8); */
    /*         opacity: 0.5; */
    /*     } */

    /*     100% { */
    /*         transform: scale(0.8); */
    /*         opacity: 0.5; */
    /*     } */
    /* } */
</style>

<div class="chat-container">
    <div class="chat-inner">
        <div class="chat-header">
            💬 Chat Room
        </div>

        <div id="chatBox" class="chat-box">
            @if (Model != null && Model.Any())
            {
                @foreach (var msg in Model)
                {
                    // nguoi nhan ben phai, nguoi nhan ben trai
                    var isSentByCurrentUser = msg.SenderUserName == @ViewBag.SelectedUser?.UserName;
                    var messageClass = isSentByCurrentUser ? "received" : "sent" ;
                    <div class="message @messageClass">
                            @* hien ten *@
                            @* <div class="message-sender">@msg.SenderUserName</div> *@
                            <div class="message-bubble">
                                @msg.Content
                                <div class="message-time">@msg.Timestamp</div>
                            </div>
                        </div>
                 
                }
            }
            else
            {
                <div class="empty-state">
                    <svg class="empty-state-icon" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z" clip-rule="evenodd"></path>
                    </svg>
                    <p>Start a conversation!</p>
                </div>
            }
        </div>

        <div class="typing-indicator" id="typingIndicator">
            Someone is typing<span class="typing-dots"><span></span><span></span><span></span></span>
        </div>

        <div class="chat-input-container">
            <div class="chat-input-wrapper">
                <input type="text" id="messageInput" class="message-input" placeholder="Type your message..." />
                <button class="send-button" onclick="sendMessage()">
                    <svg class="send-icon" viewBox="0 0 24 24">
                        <path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z" />
                    </svg>
                </button>
            </div>
        </div>
    </div>
</div>

<input type="hidden" id="receiverId" value="@ViewBag.ReceiverId" />
<input type="hidden" id="senderId" value="@User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value" />
@* t muốn lấy ussername *@
<input type="hidden" id="senderUserName" value="@User?.Identity?.Name" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script>
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chathub")
        .configureLogging(signalR.LogLevel.Information)
        .build();

    connection.start()
        .then(() => {
            console.log("Connected to SignalR");
            console.log("Connection ID:", connection.connectionId);
        })
        .catch(err => {
            console.error("SignalR Connection Error:", err);
        });

    connection.on("ReceiveMessage", function (senderId, message,senderUserName) {
        console.log("Received message:", senderId, message,senderUserName);
        addMessage(senderUserName,message, 'received');
    });

    connection.onclose(function (error) {
        console.error("SignalR connection closed:", error);
    });

    connection.onreconnecting(function (error) {
        console.log("SignalR reconnecting:", error);
    });

    connection.onreconnected(function (connectionId) {
        console.log("SignalR reconnected:", connectionId);
    });

    function addMessage(senderUserName, message, type) {
        const msgBox = document.getElementById("chatBox");
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${type}`;

        const currentTime = new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});

        messageDiv.innerHTML = `
           @* hien ten*@
           @* <div class="message-sender">${type === 'sent' ? 'You' : senderUserName}</div>*@
          
            <div class="message-bubble">
                ${message}
                <div class="message-time">${currentTime}</div>
            </div>
        `;
        console.log("message sss",message);

        // Remove empty state if exists
        const emptyState = msgBox.querySelector('.empty-state');
        if (emptyState) {
            emptyState.remove();
        }

        msgBox.appendChild(messageDiv);
        msgBox.scrollTop = msgBox.scrollHeight;
    }

    async function sendMessage() {
        const senderId = document.getElementById("senderId").value;
        const receiverId = document.getElementById("receiverId").value;
        const message = document.getElementById("messageInput").value;
        const senderUserName = document.getElementById("senderUserName").value;

        console.log("Sending - Sender:", senderId, "Receiver:", receiverId, "Message:", message," senderUserName",senderUserName);

        if (!message.trim()) {
            console.log("Empty message, not sending");
            return;
        }

        try {
            await connection.invoke("SendMessage", senderId, receiverId, message,senderUserName);
            console.log("Message sent successfully");

            // Add message to chat immediately for sender
            addMessage('You', message, 'sent');

            document.getElementById("messageInput").value = "";
        } catch (err) {
            console.error("Error sending message:", err);
        }
    }

    // Send message on Enter key press
    document.getElementById("messageInput").addEventListener("keypress", function(event) {
        if (event.key === "Enter") {
            event.preventDefault();
            sendMessage();
        }
    });

    // Auto-resize input
    const messageInput = document.getElementById("messageInput");
    let typingTimer;

    messageInput.addEventListener("input", function() {
        clearTimeout(typingTimer);

        // Auto resize
        this.style.height = 'auto';
        this.style.height = Math.min(this.scrollHeight, 120) + 'px';
    });
</script>